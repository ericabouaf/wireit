{"majorversion": 2, "filemap": {"TerminalInput.js": {"classlist": ["WireIt.util.TerminalInput"], "name": "TerminalInput.js", "module": "WireIt"}, "Container.js": {"classlist": ["WireIt.Container"], "name": "Container.js", "module": "WireIt"}, "Layer.js": {"classlist": [], "name": "Layer.js", "module": "animations-plugin"}, "ArrowWire.js": {"classlist": ["WireIt.ArrowWire"], "name": "ArrowWire.js", "module": "WireIt"}, "ModuleProxy.js": {"classlist": ["WireIt.ModuleProxy"], "name": "ModuleProxy.js", "module": "editor-plugin"}, "WiringEditor.js": {"classlist": ["WireIt.WiringEditor"], "name": "WiringEditor.js", "module": "editor-plugin"}, "DDResize.js": {"classlist": ["WireIt.util.DDResize"], "name": "DDResize.js", "module": "WireIt"}, "BezierArrowWire.js": {"classlist": ["WireIt.BezierArrowWire"], "name": "BezierArrowWire.js", "module": "WireIt"}, "LayerContainer.js": {"classlist": ["inputEx.LayerContainer"], "name": "LayerContainer.js", "module": "inputex-plugin"}, "fields.js": {"classlist": [], "name": "fields.js", "module": "inputex-plugin"}, "InOutContainer.js": {"classlist": ["WireIt.util.InOutContainer"], "name": "InOutContainer.js", "module": "WireIt"}, "CanvasElement.js": {"classlist": ["WireIt.CanvasElement"], "name": "CanvasElement.js", "module": "WireIt"}, "Wire.js": {"classlist": ["WireIt.Wire"], "name": "Wire.js", "module": "WireIt"}, "BaseEditor.js": {"classlist": ["WireIt.BaseEditor"], "name": "BaseEditor.js", "module": "composable-plugin"}, "rest-json.js": {"classlist": [], "name": "rest-json.js", "module": "editor-plugin"}, "RectLabelContainer.js": {"classlist": ["WireIt.RectLabelContainer"], "name": "RectLabelContainer.js", "module": "WireIt"}, "GroupUtils.js": {"classlist": ["WireIt.GroupUtils"], "name": "GroupUtils.js", "module": "editor-plugin"}, "DD.js": {"classlist": ["WireIt.util.DD"], "name": "DD.js", "module": "WireIt"}, "WirableField.js": {"classlist": ["inputEx.BaseField", "inputEx.Field"], "name": "WirableField.js", "module": "inputex-plugin"}, "TerminalOutput.js": {"classlist": ["WireIt.util.TerminalOutput"], "name": "TerminalOutput.js", "module": "WireIt"}, "ComposedContainer.js": {"classlist": ["WireIt.util.ComposedContainer"], "name": "ComposedContainer.js", "module": "composable-plugin"}, "ajax.js": {"classlist": ["WireIt.WiringEditor.adapters.Ajax"], "name": "ajax.js", "module": "editor-plugin"}, "Anim.js": {"classlist": ["WireIt.util.Anim"], "name": "Anim.js", "module": "animations-plugin"}, "CanvasContainer.js": {"classlist": ["WireIt.CanvasContainer"], "name": "CanvasContainer.js", "module": "WireIt"}, "ComposableWiringEditor.js": {"classlist": ["WireIt.util.ComposableWiringEditor"], "name": "ComposableWiringEditor.js", "module": "animations-plugin"}, "gears.js": {"classlist": ["WireIt.WiringEditor.adapters.Gears"], "name": "gears.js", "module": "editor-plugin"}, "Layout.js": {"classlist": ["inputEx.WireIt.Layout.Spring"], "name": "Layout.js", "module": "inputex-plugin"}, "LayerMap.js": {"classlist": ["WireIt.LayerMap"], "name": "LayerMap.js", "module": "WireIt"}, "Grouper.js": {"classlist": ["WireIt.Grouper"], "name": "Grouper.js", "module": "editor-plugin"}, "GroupFormContainer.js": {"classlist": ["WireIt.FormContainer"], "name": "GroupFormContainer.js", "module": "editor-plugin"}, "LeftSquareArrowWire.js": {"classlist": ["WireIt.LeftSquareArrow"], "name": "LeftSquareArrowWire.js", "module": "WireIt"}, "FormContainer.js": {"classlist": ["WireIt.FormContainer"], "name": "FormContainer.js", "module": "editor-plugin"}, "ImageContainer.js": {"classlist": ["WireIt.util.ImageContainer"], "name": "ImageContainer.js", "module": "WireIt"}, "RubberBand.js": {"classlist": ["WireIt.RubberBand"], "name": "RubberBand.js", "module": "editor-plugin"}, "EllipseLabelContainer.js": {"classlist": ["WireIt.util.EllipseLabelContainer"], "name": "EllipseLabelContainer.js", "module": "WireIt"}, "RightSquareArrowWire.js": {"classlist": ["WireIt.RightSquareArrow"], "name": "RightSquareArrowWire.js", "module": "WireIt"}, "json-rpc.js": {"classlist": ["WireIt.WiringEditor.adapters.JsonRpc"], "name": "json-rpc.js", "module": "editor-plugin"}, "BezierWire.js": {"classlist": ["WireIt.BezierWire"], "name": "BezierWire.js", "module": "WireIt"}, "Scissors.js": {"classlist": ["WireIt.Scissors"], "name": "Scissors.js", "module": "WireIt"}, "Terminal.js": {"classlist": ["WireIt.Terminal"], "name": "Terminal.js", "module": "WireIt"}, "StepWire.js": {"classlist": ["WireIt.StepWire"], "name": "StepWire.js", "module": "WireIt"}, "WireIt.js": {"classlist": ["WireIt.WireIt"], "name": "WireIt.js", "module": "WireIt"}, "TerminalProxy.js": {"classlist": ["WireIt.TerminalProxy"], "name": "TerminalProxy.js", "module": "WireIt"}, "Group.js": {"classlist": ["WireIt.Group"], "name": "Group.js", "module": "editor-plugin"}, "TextareaContainer.js": {"classlist": ["WireIt.TextareaContainer"], "name": "TextareaContainer.js", "module": "inputex-plugin"}}, "modules": {"WireIt": {"description": "WireIt provide classes to build wirable interfaces", "submodules": [], "classlist": ["WireIt.ArrowWire", "WireIt.BezierArrowWire", "WireIt.BezierWire", "WireIt.CanvasContainer", "WireIt.CanvasElement", "WireIt.Container", "WireIt.util.DD", "WireIt.util.DDResize", "WireIt.util.EllipseLabelContainer", "WireIt.util.ImageContainer", "WireIt.util.InOutContainer", "WireIt.Layer", "WireIt.LayerMap", "WireIt.LeftSquareArrow", "WireIt.RectLabelContainer", "WireIt.RightSquareArrow", "WireIt.Scissors", "WireIt.StepWire", "WireIt.Terminal", "WireIt.util.TerminalInput", "WireIt.util.TerminalOutput", "WireIt.TerminalProxy", "WireIt.Wire", "WireIt.WireIt"], "filelist": ["ArrowWire.js", "BezierArrowWire.js", "BezierWire.js", "CanvasContainer.js", "CanvasElement.js", "Container.js", "DD.js", "DDResize.js", "EllipseLabelContainer.js", "ImageContainer.js", "InOutContainer.js", "Layer.js", "LayerMap.js", "LeftSquareArrowWire.js", "RectLabelContainer.js", "RightSquareArrowWire.js", "Scissors.js", "StepWire.js", "Terminal.js", "TerminalInput.js", "TerminalOutput.js", "TerminalProxy.js", "Wire.js", "WireIt.js"], "subdata": {}, "name": "WireIt"}, "animations-plugin": {"description": "Some utility classes to provide animations in WireIt", "submodules": [], "classlist": ["WireIt.util.Anim"], "filelist": ["Anim.js", "Layer.js", "ComposableWiringEditor.js"], "subdata": {}, "name": "animations-plugin"}, "inputex-plugin": {"description": "Include the form library inputEx + WirableField + FormContainer<br />\n<br />\n<b>WARNING</b>: The \"WirableField.js\" file MUST be loaded AFTER \"inputEx/field.js\" and BEFORE all other inputEx fields !<br />\n<br />\nSee the inputEx website for documentation of the fields & forms: <a href='http://neyric.github.com/inputex'>http://neyric.github.com/inputex</a><br />", "submodules": [], "classlist": ["WireIt.FormContainer", "WireIt.TextareaContainer", "inputEx.BaseField", "inputEx.Field", "inputEx.LayerContainer"], "filelist": ["TextareaContainer.js", "WirableField.js", "fields.js", "LayerContainer.js", "Layout.js"], "subdata": {}, "name": "inputex-plugin"}, "editor-plugin": {"description": "WireIt editor", "submodules": [], "classlist": ["WireIt.BaseEditor", "WireIt.ModuleProxy", "WireIt.WiringEditor", "WireIt.WiringEditor.adapters.Ajax", "WireIt.WiringEditor.adapters.Gears", "WireIt.WiringEditor.adapters.JsonRpc", "WireIt.Group", "WireIt.FormContainer", "WireIt.GroupUtils", "WireIt.Grouper", "WireIt.RubberBand"], "filelist": ["ModuleProxy.js", "WiringEditor.js", "ajax.js", "gears.js", "json-rpc.js", "rest-json.js", "Group.js", "GroupFormContainer.js", "GroupUtils.js", "Grouper.js", "RubberBand.js", "FormContainer.js"], "subdata": {}, "name": "editor-plugin"}, "composable-plugin": {"description": "Extend the WiringEditor with composable wirings", "submodules": [], "classlist": ["WireIt.util.ComposableWiringEditor", "WireIt.util.ComposedContainer"], "filelist": ["ComposedContainer.js", "BaseEditor.js"], "subdata": {}, "name": "composable-plugin"}, "layout-plugin": {"description": "Layout Plugin\nTODO: provide an AbstractLayout Class", "submodules": [], "classlist": ["inputEx.WireIt.Layout.Spring"], "filelist": [], "subdata": {}, "name": "layout-plugin"}}, "classmap": {"WireIt.Container": {"name": "WireIt.Container", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "      Configuration object (see options property)"}, {"type": "WireIt.Layer", "name": "layer", "description": " The WireIt.Layer (or subclass) instance that contains this container"}], "description": "Visual module that contains terminals. The wires are updated when the module is dragged around."}], "namespace": "WireIt", "module": "WireIt", "events": {"eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myContainer.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventFocus": {"description": "Event that is fired when the container is focused\nYou can register this event with myContainer.eventFocus.subscribe(function(e,params) { }, scope);", "guessedname": "eventFocus", "guessedtype": "property"}, "eventBlur": {"description": "Event that is fired when the container loses focus\nYou can register this event with myContainer.eventBlur.subscribe(function(e,params) { }, scope);", "guessedname": "eventBlur", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myContainer.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}}, "guessedname": "Container", "methods": {"onCloseButton": {"description": "Called when the user clicked on the close button", "guessedname": "onCloseButton", "guessedtype": "function"}, "initTerminals": {"description": "Call the addTerminal method for each terminal configuration.", "guessedname": "initTerminals", "guessedtype": "function"}, "render": {"description": "Render the dom of the container", "guessedname": "render", "guessedtype": "function"}, "onMouseDown": {"description": "Called when the user made a mouse down on the container and sets the focus to this container (only if within a Layer)", "guessedname": "onMouseDown", "guessedtype": "function"}, "addTerminal": {"return": {"type": "WireIt.Terminal", "description": "terminal Created terminal"}, "description": "Instanciate the terminal from the class pointer \"xtype\" (default WireIt.Terminal)", "guessedname": "addTerminal", "guessedtype": "function"}, "getTerminal": {"guessedname": "getTerminal", "guessedtype": "function"}, "setBody": {"params": [{"type": "String or HTMLElement", "name": "content", "description": ""}], "description": "Sets the content of the body element", "guessedname": "setBody", "guessedtype": "function"}, "makeResizable": {"description": "Use the DDResize utility to make container resizable while redrawing the connected wires", "guessedname": "makeResizable", "guessedtype": "function"}, "superHighlight": {"description": "TODO", "guessedname": "superHighlight", "guessedtype": "function"}, "makeDraggable": {"description": "Use the DD utility to make container draggable while redrawing the connected wires", "guessedname": "makeDraggable", "guessedtype": "function"}, "dehighlight": {"description": "TODO", "guessedname": "dehighlight", "guessedtype": "function"}, "getXY": {"return": {"type": "", "description": "Array position"}, "description": "Get the position relative to the layer (if any)", "guessedname": "getXY", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "val", "description": " Value"}], "description": "Subclasses should override this method.", "guessedname": "setValue", "guessedtype": "function"}, "removeAllTerminals": {"description": "Remove all terminals", "guessedname": "removeAllTerminals", "guessedtype": "function"}, "redrawAllTerminals": {"description": "Redraw all the wires connected to the terminals of this container", "guessedname": "redrawAllWires", "guessedtype": "function"}, "onResize": {"description": "Function called when the container is being resized.\nIt sets the size of the body element of the container", "guessedname": "onResize", "guessedtype": "function"}, "setOptions": {"description": "Set the options by putting them in this (so it overrides the prototype default)", "guessedname": "setOptions", "guessedtype": "function"}, "removeFocus": {"description": "Remove the class that shows the container as \"focused\"", "guessedname": "removeFocus", "guessedtype": "function"}, "setFocus": {"description": "Adds the class that shows the container as \"focused\"", "guessedname": "setFocus", "guessedtype": "function"}, "onRemoveWire": {"params": [{"type": "Event", "name": "event", "description": " The eventRemoveWire event fired by the terminal"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the removed Wire instance"}], "description": "This method is called when a wire is removed from one of the terminals", "guessedname": "onRemoveWire", "guessedtype": "function"}, "remove": {"description": "Remove this container from the dom", "guessedname": "remove", "guessedtype": "function"}, "getValue": {"return": {"type": "Object", "description": "value"}, "description": "Subclasses should override this method.", "guessedname": "getValue", "guessedtype": "function"}, "getConfig": {"description": "Return the config of this container.", "guessedname": "getConfig", "guessedtype": "function"}, "highlight": {"description": "TODO", "guessedname": "highlight", "guessedtype": "function"}, "onAddWire": {"params": [{"type": "Event", "name": "event", "description": " The eventAddWire event fired by the terminal"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the added Wire instance"}], "description": "This method is called when a wire is added to one of the terminals", "guessedname": "onAddWire", "guessedtype": "function"}}, "file": "Container.js", "guessedtype": "function", "shortname": "Container", "properties": {"el": {"type": "{HTMLElement}", "description": "Container DOM element", "guessedname": "el", "guessedtype": "property"}, "layer": {"type": "{WireIt.Layer}", "description": "the WireIt.Layer object that schould contain this container", "guessedname": "layer", "guessedtype": "property"}, "wires": {"type": "{Array}", "description": "List of all the wires connected to this container terminals", "guessedname": "wires", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.Container\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "resizable": {"default": "true", "type": "Boolean", "description": "boolean that makes the container resizable", "guessedname": "resizable", "guessedtype": "property"}, "title": {"default": "null", "type": "String", "description": "text that will appear in the module header", "guessedname": "title", "guessedtype": "property"}, "height": {"default": "null", "type": "Integer", "description": "initial height of the container", "guessedname": "height", "guessedtype": "property"}, "className": {"default": "\"WireIt-Container\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "groupable": {"default": "true", "type": "Boolean", "description": "option to add the grouping button", "guessedname": "groupable", "guessedtype": "property"}, "ddHandle": {"default": "true", "type": "Boolean", "description": "(only if draggable) boolean indicating we use a handle for drag'n drop", "guessedname": "ddHandle", "guessedtype": "property"}, "ddHandleClassName": {"default": "\"WireIt-Container-ddhandle\"", "type": "String", "description": "CSS class name for the drag'n drop handle", "guessedname": "ddHandleClassName", "guessedtype": "property"}, "closeButtonClassName": {"default": "\"WireIt-Container-closebutton\"", "type": "String", "description": "CSS class name for the close button", "guessedname": "closeButtonClassName", "guessedtype": "property"}, "draggable": {"default": "true", "type": "Boolean", "description": "boolean that enables drag'n drop on this container", "guessedname": "draggable", "guessedtype": "property"}, "bodyEl": {"type": "{HTMLElement}", "description": "Body element", "guessedname": "bodyEl", "guessedtype": "property"}, "terminals": {"type": "{Array}", "description": "List of the terminals", "guessedname": "terminals", "guessedtype": "property"}, "close": {"default": "true", "type": "Boolean", "description": "display a button to close the container", "guessedname": "close", "guessedtype": "property"}, "position": {"default": "[100,100]", "type": "Array", "description": "initial position of the container", "guessedname": "position", "guessedtype": "property"}, "resizeHandleClassName": {"default": "\"WireIt-Container-resizehandle\"", "type": "String", "description": "CSS class name for the resize handle", "guessedname": "resizeHandleClassName", "guessedtype": "property"}, "preventSelfWiring": {"default": "true", "type": "Boolean", "description": "option to prevent connections between terminals of this same container", "guessedname": "preventSelfWiring", "guessedtype": "property"}, "width": {"default": "null", "type": "Integer", "description": "initial width of the container", "guessedname": "width", "guessedtype": "property"}, "icon": {"default": "null", "type": "String", "description": "image url to be displayed in the module header", "guessedname": "icon", "guessedtype": "property"}}, "description": "Visual module that contains terminals. The wires are updated when the module is dragged around."}, "inputEx.WireIt.Layout.Spring": {"name": "inputEx.WireIt.Layout.Spring", "constructors": [{"description": "Spring Layout (TODO: use different eges k)"}], "namespace": "inputEx", "module": "layout-plugin", "guessedname": "Spring", "methods": {"init": {"description": "Init the default structure", "guessedname": "init", "guessedtype": "function"}, "run": {"description": "TODO: split iterations into \"step\" method", "guessedname": "run", "guessedtype": "function"}}, "file": "Layout.js", "guessedtype": "function", "shortname": "WireIt.Layout.Spring", "description": "Spring Layout (TODO: use different eges k)"}, "inputEx.BaseField": {"name": "inputEx.BaseField", "namespace": "inputEx", "module": "inputex-plugin", "guessedname": "BaseField", "file": "WirableField.js", "guessedtype": "property", "shortname": "BaseField", "description": "Copy of the original inputEx.Field class that we're gonna override to extend it."}, "WireIt.ArrowWire": {"name": "WireIt.ArrowWire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see properties)"}], "description": "The arrow wire widget"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "ArrowWire", "methods": {"draw": {"description": "Drawing methods for arrows", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.Wire", "superclass": "WireIt.Wire", "file": "ArrowWire.js", "guessedtype": "function", "shortname": "ArrowWire", "properties": {"xtype": {"default": "\"WireIt.ArrowWire\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "The arrow wire widget"}, "WireIt.BezierArrowWire": {"name": "WireIt.BezierArrowWire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "The bezier wire widget"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "BezierArrowWire", "methods": {"draw": {"description": "Attempted bezier drawing method for arrows", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.BezierWire", "superclass": "WireIt.BezierWire", "file": "BezierArrowWire.js", "guessedtype": "function", "shortname": "BezierArrowWire", "properties": {"xtype": {"default": "\"WireIt.BezierArrowWire\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "The bezier wire widget"}, "WireIt.WiringEditor": {"name": "WireIt.WiringEditor", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}], "description": "The WiringEditor class provides a full page interface"}], "namespace": "WireIt", "module": "editor-plugin", "guessedname": "WiringEditor", "methods": {"updateLoadPanelList": {"guessedname": "updateLoadPanelList", "guessedtype": "function"}, "saveModuleSuccess": {"description": "saveModule success callback", "guessedname": "saveModuleSuccess", "guessedtype": "function"}, "onNew": {"guessedname": "onNew", "guessedtype": "function"}, "checkAutoLoad": {"description": "checkAutoLoad looks for the \"autoload\" URL parameter and open the pipe.\nreturns true if it loads a Pipe", "guessedname": "checkAutoLoad", "guessedtype": "function"}, "render": {"description": "Add the rendering of the layer", "guessedname": "render", "guessedtype": "function"}, "renderLoadPanel": {"guessedname": "renderLoadPanel", "guessedtype": "function"}, "onDelete": {"guessedname": "onDelete", "guessedtype": "function"}, "renderModulesAccordion": {"description": "render the modules accordion in the left panel", "guessedname": "renderModulesAccordion", "guessedtype": "function"}, "addModule": {"description": "add a module at the given pos", "guessedname": "addModule", "guessedtype": "function"}, "addModuleToList": {"description": "Add a module definition to the left list", "guessedname": "addModuleToList", "guessedtype": "function"}, "load": {"description": "Start the loading of the pipes using the adapter", "guessedname": "load", "guessedtype": "function"}, "onLoadSuccess": {"guessedname": "onLoadSuccess", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "setOptions", "guessedtype": "function"}, "getValue": {"description": "This method return a wiring within the given vocabulary described by the modules list", "guessedname": "getValue", "guessedtype": "function"}, "getPipeByName": {"return": {"type": "Object", "description": "return the pipe configuration"}, "params": [{"type": "String", "name": "name", "description": " Pipe's name"}], "guessedname": "getPipeByName", "guessedtype": "function"}, "loadPipe": {"params": [{"type": "String", "name": "name", "description": " Pipe name"}], "guessedname": "loadPipe", "guessedtype": "function"}, "saveModuleFailure": {"description": "saveModule failure callback", "guessedname": "saveModuleFailure", "guessedtype": "function"}, "save": {"description": "save the current module", "guessedname": "save", "guessedtype": "function"}, "inputFilterTimer": {"description": "Method called from each keyup on the search filter in load panel.\nThe real filtering occurs only after 500ms so that the filter process isn't called too often", "guessedname": "inputFilterTimer", "guessedtype": "function"}, "buildModulesList": {"description": "Build the left menu on the left", "guessedname": "buildModulesList", "guessedtype": "function"}}, "extends": "WireIt.BaseEditor", "superclass": "WireIt.BaseEditor", "file": "WiringEditor.js", "guessedtype": "function", "shortname": "WiringEditor", "properties": {"adapters": {"static": "", "description": "WiringEditor Adapters", "guessedname": "adapters", "guessedtype": "property"}, "layer": {"type": "{WireIt.Layer}", "guessedname": "layer", "guessedtype": "property"}, "modulesByName": {"type": "{Object}", "description": "Hash object to reference module definitions by their name", "guessedname": "modulesByName", "guessedtype": "property"}}, "description": "The WiringEditor class provides a full page interface"}, "WireIt.Layer": {"name": "WireIt.Layer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "   Configuration object (see the properties)"}], "description": "A layer encapsulate a bunch of containers and wires"}], "namespace": "WireIt", "module": "WireIt", "events": {"eventAddContainer": {"description": "Event that is fired when a container is added\nYou can register this event with myTerminal.eventAddContainer.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventAddContainer", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myTerminal.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}, "eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myTerminal.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventContainerDragged": {"description": "Event that is fired when a container has been moved\nYou can register this event with myTerminal.eventContainerDragged.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventContainerDragged", "guessedtype": "property"}, "eventContainerResized": {"description": "Event that is fired when a container has been resized\nYou can register this event with myTerminal.eventContainerResized.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventContainerResized", "guessedtype": "property"}, "eventChanged": {"description": "Event that is fired when the layer has been changed\nYou can register this event with myTerminal.eventChanged.subscribe(function(e,params) { }, scope);", "guessedname": "eventChanged", "guessedtype": "property"}, "eventRemoveContainer": {"description": "Event that is fired when a container is removed\nYou can register this event with myTerminal.eventRemoveContainer.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventRemoveContainer", "guessedtype": "property"}}, "guessedname": "Layer", "methods": {"removeGroup": {"description": "TODO", "guessedname": "removeGroup", "guessedtype": "function"}, "setWiring": {"params": [{"type": "Object", "name": "wiring", "description": " layer configuration"}], "description": "Load a layer configuration object", "guessedname": "setWiring", "guessedtype": "function"}, "initWires": {"description": "Create all the wires passed in the config", "guessedname": "initWires", "guessedtype": "function"}, "unsetSuperHighlighted": {"description": "TODO", "guessedname": "unsetSuperHighlighted", "guessedtype": "function"}, "onRemoveWire": {"params": [{"type": "Event", "name": "event", "description": " The eventRemoveWire event fired by the container"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the removed Wire instance"}], "description": "Update the wire list when a wire is removed", "guessedname": "onRemoveWire", "guessedtype": "function"}, "removeContainer": {"params": [{"type": "WireIt.Container", "name": "container", "description": " Container instance to remove"}], "description": "Remove a container", "guessedname": "removeContainer", "guessedtype": "function"}, "setSuperHighlighted": {"description": "TODO", "guessedname": "setSuperHighlighted", "guessedtype": "function"}, "onWireMouseMove": {"params": [{"type": "Event", "name": "e", "description": " Mouse click event"}], "description": "Handles mousemove events on any wire canvas\nNote: we treat mouse events globally so that wires behind others can still receive the events", "guessedname": "onWireMouseMove", "guessedtype": "function"}, "setOptions": {"description": "Set the options by putting them in this (so it overrides the prototype default)", "guessedname": "setOptions", "guessedtype": "function"}, "render": {"description": "Create the dom of the layer and insert it into the parent element", "guessedname": "render", "guessedtype": "function"}, "removeAllContainers": {"deprecated": "Alias for clear", "guessedname": "removeAllContainers", "guessedtype": "function"}, "addWire": {"return": {"type": "WireIt.Wire", "description": "Wire instance build from the xtype"}, "params": [{"type": "Object", "name": "wireConfig", "description": "  Wire configuration object (see WireIt.Wire class for details)"}], "description": "Instanciate a wire given its \"xtype\" (default to WireIt.Wire)", "guessedname": "addWire", "guessedtype": "function"}, "addContainer": {"return": {"type": "WireIt.Container", "description": "Container instance build from the xtype"}, "params": [{"type": "Object", "name": "containerConfig", "description": "  Container configuration object (see WireIt.Container class for details)"}], "description": "Instanciate a container given its \"xtype\": WireIt.Container (default) or a subclass of it.", "guessedname": "addContainer", "guessedtype": "function"}, "onWireClick": {"params": [{"type": "Event", "name": "e", "description": " Mouse click event"}], "description": "Handles click on any wire canvas\nNote: we treat mouse events globally so that wires behind others can still receive the events", "guessedname": "onWireClick", "guessedtype": "function"}, "_getMouseEvtPos": {"return": {"type": "Array", "description": "position"}, "params": [{"type": "Event", "name": "e", "description": " Mouse event"}], "description": "Returns a position relative to the layer from a mouse event", "guessedname": "_getMouseEvtPos", "guessedtype": "function"}, "initContainers": {"description": "Create all the containers passed as options", "guessedname": "initContainers", "guessedtype": "function"}, "clear": {"description": "Remove all the containers in this layer (and the associated terminals and wires)", "guessedname": "clear", "guessedtype": "function"}, "onAddWire": {"params": [{"type": "Event", "name": "event", "description": " The eventAddWire event fired by the container"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the added Wire instance"}], "description": "Update the wire list when any of the containers fired the eventAddWire", "guessedname": "onAddWire", "guessedtype": "function"}, "getWiring": {"return": {"type": "Obj", "description": "layer configuration"}, "description": "Return an object that represent the state of the layer including the containers and the wires", "guessedname": "getWiring", "guessedtype": "function"}}, "file": "Layer.js", "guessedtype": "function", "shortname": "Layer", "properties": {"el": {"type": "{HTMLElement}", "description": "Layer DOM element", "guessedname": "el", "guessedtype": "property"}, "wires": {"type": "{Array}", "description": "List of all the WireIt.Wire (or subclass) instances in this layer", "guessedname": "wires", "guessedtype": "property"}, "enableMouseEvents": {"default": "true", "type": "Boolean", "description": "Enable the mouse events", "guessedname": "enableMouseEvents", "guessedtype": "property"}, "grouper": {"description": "TODO", "guessedname": "grouper", "guessedtype": "property"}, "parentEl": {"default": "null", "type": "DOMElement", "description": "DOM element that schould contain the layer", "guessedname": "parentEl", "guessedtype": "property"}, "className": {"default": "\"WireIt-Layer\"", "type": "String", "description": "CSS class name for the layer element", "guessedname": "className", "guessedtype": "property"}, "layerMap": {"default": "false", "type": "Boolean", "description": "Display the layer map", "guessedname": "layerMap", "guessedtype": "property"}, "groups": {"description": "TODO", "guessedname": "groups", "guessedtype": "property"}, "layerMapOptions": {"default": "null", "type": "Object", "description": "Options for the layer map", "guessedname": "layerMapOptions", "guessedtype": "property"}, "containers": {"type": "{Array}", "description": "List of all the WireIt.Container (or subclass) instances in this layer", "guessedname": "containers", "guessedtype": "property"}}, "description": "A layer encapsulate a bunch of containers and wires"}, "WireIt.Group": {"name": "WireIt.Group", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "Group", "file": "Group.js", "guessedtype": "function", "shortname": "Group", "description": "Handles a Group"}, "WireIt.Grouper": {"file": "Grouper.js", "namespace": "WireIt", "module": "editor-plugin", "methods": {"setSelectedGroup": {"description": "setSelectedGroup", "guessedname": "setSelectedGroup", "guessedtype": "function"}, "removeGroup": {"description": "removeGroup", "guessedname": "removeGroup", "guessedtype": "function"}, "groupCollapse": {"description": "groupCollapse", "guessedname": "groupCollapse", "guessedtype": "function"}, "removeContainer": {"description": "removeContainer", "guessedname": "removeContainer", "guessedtype": "function"}, "rubberbandSelect": {"description": "rubberbandSelect", "guessedname": "rubberbandSelect", "guessedtype": "function"}, "setGroupOptions": {"description": "setGroupOptions", "guessedname": "setGroupOptions", "guessedtype": "function"}, "showGroupConfigure": {"description": "showGroupConfigure", "guessedname": "showGroupConfigure", "guessedtype": "function"}, "setDisplay": {"description": "setDisplay", "guessedname": "setDisplay", "guessedtype": "function"}, "toggle": {"description": "toggle", "guessedname": "toggle", "guessedtype": "function"}, "selectGroup": {"description": "selectGroup", "guessedname": "selectGroup", "guessedtype": "function"}, "makeGroup": {"description": "makeGroup", "guessedname": "makeGroup", "guessedtype": "function"}, "setupWidget": {"description": "setupWidget", "guessedname": "setupWidget", "guessedtype": "function"}, "addContainer": {"description": "addContainer", "guessedname": "addContainer", "guessedtype": "function"}, "showGroup": {"description": "showGroup", "guessedname": "showGroup", "guessedtype": "function"}, "addGroup": {"description": "addGroup", "guessedname": "addGroup", "guessedtype": "function"}, "unGroup": {"description": "unGroup", "guessedname": "unGroup", "guessedtype": "function"}, "deselectGroup": {"description": "deselectGroup", "guessedname": "deselectGroup", "guessedtype": "function"}, "hideGroupConfigure": {"description": "hideGroupConfigure", "guessedname": "hideGroupConfigure", "guessedtype": "function"}, "getContainerCorners": {"description": "getContainerCorners", "guessedname": "getContainerCorners", "guessedtype": "function"}, "setupSelectedGroups": {"description": "setupSelectedGroups", "guessedname": "setupSelectedGroups", "guessedtype": "function"}}, "guessedname": "Grouper", "guessedtype": "function", "shortname": "Grouper", "name": "WireIt.Grouper"}, "WireIt.LeftSquareArrow": {"name": "WireIt.LeftSquareArrow", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "Square type of arrows for representing loops (but not restricted to) in CFG"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "LeftSquareArrow", "methods": {"draw": {"description": "Drawing method", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.Wire", "superclass": "WireIt.Wire", "file": "LeftSquareArrowWire.js", "guessedtype": "function", "shortname": "LeftSquareArrow", "properties": {"xtype": {"default": "\"WireIt.LeftSquareArrow\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "Square type of arrows for representing loops (but not restricted to) in CFG"}, "WireIt.Wire": {"name": "WireIt.Wire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "The wire widget that uses a canvas to render"}], "namespace": "WireIt", "module": "WireIt", "events": {"eventMouseClick": {"description": "Event that is fired when a wire is clicked (on the wire, not the canvas)\nYou can register this event with myWire.eventWireClick.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseClick", "guessedtype": "property"}, "eventMouseMove": {"description": "Event that is fired when the mouse moves inside the wire\nYou can register this event with myWire.eventMouseMove.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseMove", "guessedtype": "property"}, "eventMouseOut": {"description": "Event that is fired when the mouse exits the wire\nYou can register this event with myWire.eventMouseOut.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseOut", "guessedtype": "property"}, "eventMouseIn": {"description": "Event that is fired when the mouse enter the wire\nYou can register this event with myWire.eventMouseIn.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseIn", "guessedtype": "property"}}, "guessedname": "Wire", "methods": {"renderLabel": {"description": "Render the label container", "guessedname": "renderLabel", "guessedtype": "function"}, "draw": {"description": "Drawing method", "guessedname": "draw", "guessedtype": "function"}, "onWireIn": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse comes into the wire\nNote: this will only work within a layer", "guessedname": "onWireIn", "guessedtype": "function"}, "getOtherTerminal": {"return": {"type": "WireIt.Terminal", "description": "terminal    the terminal that is NOT passed as argument"}, "params": [{"type": "WireIt.Terminal", "name": "terminal", "description": ""}], "description": "This function returns terminal1 if the first argument is terminal2 and vice-versa", "guessedname": "getOtherTerminal", "guessedtype": "function"}, "onWireClick": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse clicked on the wire\nNote: this will only work within a layer", "guessedname": "onWireClick", "guessedtype": "function"}, "setLabel": {"description": "Set the label", "guessedname": "setLabel", "guessedtype": "function"}, "remove": {"description": "Remove a Wire from the Dom", "guessedname": "remove", "guessedtype": "function"}, "setOptions": {"description": "Set the options by putting them in this (so it overrides the prototype default)", "guessedname": "setOptions", "guessedtype": "function"}, "onWireOut": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse comes out of the wire\nNote: this will only work within a layer", "guessedname": "onWireOut", "guessedtype": "function"}, "positionLabel": {"description": "Position the label element to the center", "guessedname": "positionLabel", "guessedtype": "function"}, "onClick": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse clicked on the canvas\nNote: this will only work within a layer", "guessedname": "onClick", "guessedtype": "function"}, "onWireMove": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse moves over a wire\nNote: this will only work within a layer", "guessedname": "onWireMove", "guessedtype": "function"}, "onMouseMove": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "Called by the Layer when the mouse moves over the canvas element.\nNote: the event is not listened directly, to receive the event event if the wire is behind another wire", "guessedname": "onMouseMove", "guessedtype": "function"}, "redraw": {"description": "Redraw the wire and label", "guessedname": "redraw", "guessedtype": "function"}, "wireDrawnAt": {"return": {"type": "Boolean", "description": "true if the wire is drawn at position (x,y) relative to the canvas element"}, "description": "Determine if the wire is drawn at position (x,y) relative to the canvas element. This is used for mouse events.", "guessedname": "wireDrawnAt", "guessedtype": "function"}, "getConfig": {"description": "Return the config of this Wire", "guessedname": "getConfig", "guessedtype": "function"}}, "extends": "WireIt.CanvasElement", "superclass": "WireIt.CanvasElement", "file": "Wire.js", "guessedtype": "function", "shortname": "Wire", "properties": {"bordercolor": {"default": "'#0000ff'", "type": "String", "description": "Border color", "guessedname": "bordercolor", "guessedtype": "property"}, "className": {"default": "\"WireIt-Wire\"", "type": "String", "description": "CSS class name for the wire element", "guessedname": "className", "guessedtype": "property"}, "parentEl": {"type": "HTMLElement", "description": "Reference to the parent dom element", "guessedname": "parentEl", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.Wire\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "labelStyle": {"default": "null", "type": "Object", "description": "Wire label style", "guessedname": "labelStyle", "guessedtype": "property"}, "bordercap": {"default": "\"round\"", "type": "String", "description": "TODO", "guessedname": "bordercap", "guessedtype": "property"}, "cap": {"default": "\"round\"", "type": "String", "description": "TODO", "guessedname": "cap", "guessedtype": "property"}, "labelEditor": {"default": "null", "type": "Object", "description": "inputEx field definition for the label editor", "guessedname": "labelEditor", "guessedtype": "property"}, "label": {"default": "null", "type": "String", "description": "Wire label", "guessedname": "label", "guessedtype": "property"}, "terminal1": {"type": "WireIt.Terminal", "description": "Source terminal", "guessedname": "terminal1", "guessedtype": "property"}, "width": {"default": "3", "type": "Integer", "description": "Wire width", "guessedname": "width", "guessedtype": "property"}, "terminal2": {"type": "WireIt.Terminal || WireIt.TerminalProxy", "description": "Target terminal", "guessedname": "terminal2", "guessedtype": "property"}, "borderwidth": {"default": "1", "type": "Integer", "description": "Border width", "guessedname": "borderwidth", "guessedtype": "property"}, "color": {"default": "'rgb(173, 216, 230)'", "type": "String", "description": "Wire color", "guessedname": "color", "guessedtype": "property"}}, "description": "The wire widget that uses a canvas to render"}, "WireIt.util.Anim": {"name": "WireIt.util.Anim", "constructors": [{"params": [{"type": "Array", "name": "terminals", "description": " List of WireIt.Terminal objects associated within the animated element"}], "description": "WireIt.util.Anim is a wrapper class for YAHOO.util.Anim, to redraw the wires associated with the given terminals while running the animation."}], "namespace": "WireIt.util", "module": "animations-plugin", "guessedname": "Anim", "methods": {"moveWireItWires": {"description": "Listen YAHOO.util.Anim.onTween events to redraw the wires", "guessedname": "moveWireItWires", "guessedtype": "function"}, "clearExplode": {"description": "Layer explosing animation", "guessedname": "clearExplode", "guessedtype": "function"}, "setTerminals": {"params": [{"type": "Array", "name": "terminals", "description": ""}], "description": "In case you change the terminals since you created the WireIt.util.Anim:", "guessedname": "setTerminals", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Anim.js", "guessedtype": "function", "params": "{String} id Parameter of YAHOO.util.Anim", "shortname": "Anim", "properties": {"_WireItTerminals": {"type": "{Array}", "description": "List of the contained terminals", "guessedname": "_WireItTerminals", "guessedtype": "property"}}, "description": "WireIt.util.Anim is a wrapper class for YAHOO.util.Anim, to redraw the wires associated with the given terminals while running the animation."}, "WireIt.RightSquareArrow": {"name": "WireIt.RightSquareArrow", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "Square type of arrows for representing loops (but not restricted to) in CFG"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "RightSquareArrow", "methods": {"draw": {"description": "Drawing method", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.Wire", "superclass": "WireIt.Wire", "file": "RightSquareArrowWire.js", "guessedtype": "function", "shortname": "RightSquareArrow", "properties": {"xtype": {"default": "\"WireIt.RightSquareArrow\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "Square type of arrows for representing loops (but not restricted to) in CFG"}, "WireIt.TextareaContainer": {"name": "WireIt.TextareaContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Configuration object (see properties)"}, {"type": "WireIt.Layer", "name": "layer", "description": " The WireIt.Layer (or subclass) instance that contains this container"}], "description": "Form container for a single textarea field which is resizeable. \nImportant: this class takes the exact same arguments as the FormContainer !\nYou still need to specify the \"fields\"."}], "namespace": "WireIt", "module": "inputex-plugin", "guessedname": "TextareaContainer", "extends": "WireIt.FormContainer", "superclass": "WireIt.FormContainer", "file": "TextareaContainer.js", "guessedtype": "function", "shortname": "TextareaContainer", "description": "Form container for a single textarea field which is resizeable. \nImportant: this class takes the exact same arguments as the FormContainer !\nYou still need to specify the \"fields\"."}, "WireIt.TerminalProxy": {"name": "WireIt.TerminalProxy", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal", "description": " Parent terminal"}, {"type": "Object", "name": "options", "description": " Configuration object (see \"termConfig\" property for details)"}], "description": "This class is used for wire edition. It inherits from YAHOO.util.DDProxy and acts as a \"temporary\" Terminal."}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalProxy", "methods": {"createFrame": {"description": "Took this method from the YAHOO.util.DDProxy class\nto overwrite the creation of the proxy Element with our custom size", "guessedname": "createFrame", "guessedtype": "function"}, "startDrag": {"guessedname": "startDrag", "guessedtype": "function"}, "endDrag": {"guessedname": "endDrag", "guessedtype": "function"}, "onDragOut": {"guessedname": "onDragOut", "guessedtype": "function"}, "isValidWireTerminal": {"guessedname": "isValidWireTerminal", "guessedtype": "function"}, "onDragDrop": {"guessedname": "onDragDrop", "guessedtype": "function"}, "onDrag": {"guessedname": "onDrag", "guessedtype": "function"}, "onDragEnter": {"guessedname": "onDragEnter", "guessedtype": "function"}}, "extends": "YAHOO.util.DDProxy", "superclass": "YAHOO.util.DDProxy", "file": "TerminalProxy.js", "guessedtype": "function", "shortname": "TerminalProxy", "properties": {"terminal": {"description": "Reference to the terminal parent", "guessedname": "terminal", "guessedtype": "property"}, "fakeTerminal": {"description": "Object that emulate a terminal which is following the mouse", "guessedname": "fakeTerminal", "guessedtype": "property"}, "termConfig": {"description": "Object containing the configuration object\n<ul>\n<li>type: 'type' of this terminal. If no \"allowedTypes\" is specified in the options, the terminal will only connect to the same type of terminal</li>\n<li>allowedTypes: list of all the allowed types that we can connect to.</li>\n<li>{Integer} terminalProxySize: size of the drag drop proxy element. default is 10 for \"10px\"</li>\n</ul>"}}, "description": "This class is used for wire edition. It inherits from YAHOO.util.DDProxy and acts as a \"temporary\" Terminal."}, "WireIt.WiringEditor.adapters.JsonRpc": {"name": "WireIt.WiringEditor.adapters.JsonRpc", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "JsonRpc", "static": "", "file": "json-rpc.js", "guessedtype": "property", "shortname": "WiringEditor.adapters.JsonRpc", "properties": {"RestJSON": {"static": "", "description": "Ajax Adapter using a REST interface. Expect JSON response for all queries.", "guessedname": "RestJSON", "guessedtype": "property"}}, "description": "JsonRpc Adapter (using ajax)"}, "WireIt.util.DD": {"name": "WireIt.util.DD", "constructors": [{"params": [{"type": "Array", "name": "terminals", "description": " List of WireIt.Terminal objects associated within the DragDrop element"}, {"type": "String", "name": "id", "description": " Parameter of YAHOO.util.DD"}, {"type": "String", "name": "sGroup", "description": " Parameter of YAHOO.util.DD"}, {"type": "Object", "name": "config", "description": " Parameter of YAHOO.util.DD"}], "description": "WireIt.util.DD is a wrapper class for YAHOO.util.DD, to redraw the wires associated with the given terminals while drag-dropping"}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "DD", "methods": {"onDrag": {"description": "Override YAHOO.util.DD.prototype.onDrag to redraw the wires", "guessedname": "onDrag", "guessedtype": "function"}, "setTerminals": {"description": "In case you change the terminals since you created the WireIt.util.DD:", "guessedname": "setTerminals", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "DD.js", "guessedtype": "function", "shortname": "DD", "properties": {"_WireItTerminals": {"type": "{Array}", "description": "List of the contained terminals", "guessedname": "_WireItTerminals", "guessedtype": "property"}}, "description": "WireIt.util.DD is a wrapper class for YAHOO.util.DD, to redraw the wires associated with the given terminals while drag-dropping"}, "WireIt.Scissors": {"name": "WireIt.Scissors", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal", "description": " Associated terminal"}, {"type": "Object", "name": "oConfigs", "description": ""}], "description": "Scissors widget to cut wires"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "Scissors", "methods": {"hide": {"guessedname": "hide", "guessedtype": "function"}, "show": {"guessedname": "show", "guessedtype": "function"}, "scissorClick": {"guessedname": "scissorClick", "guessedtype": "function"}, "initScissors": {"description": "Init the scissors", "guessedname": "initScissors", "guessedtype": "function"}, "setPosition": {"guessedname": "setPosition", "guessedtype": "function"}, "mouseOver": {"guessedname": "mouseOver", "guessedtype": "function"}, "hideNow": {"guessedname": "hideNow", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "Scissors.js", "guessedtype": "function", "shortname": "Scissors", "properties": {"_terminal": {"type": "{WireIt.Terminal}", "description": "The terminal it is associated to", "guessedname": "_terminal", "guessedtype": "property"}}, "description": "Scissors widget to cut wires"}, "WireIt.BaseEditor": {"name": "WireIt.BaseEditor", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " (layoutOptions,propertiesFields,accordionViewParams)"}], "description": "The BaseEditor class provides a full page interface"}], "namespace": "WireIt", "module": "editor-plugin", "guessedname": "BaseEditor", "methods": {"renderAlertPanel": {"description": "Render the alert panel", "guessedname": "renderAlertPanel", "guessedtype": "function"}, "render": {"description": "Render the layout & panels", "guessedname": "render", "guessedtype": "function"}, "renderHelpPanel": {"description": "Render the help dialog", "guessedname": "renderHelpPanel", "guessedtype": "function"}, "renderPropertiesAccordion": {"description": "Render the accordion using yui-accordion", "guessedname": "renderPropertiesAccordion", "guessedtype": "function"}, "onHelp": {"description": "Create a help panel", "guessedname": "onHelp", "guessedtype": "function"}, "alert": {"description": "Displays a message", "guessedname": "alert", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "setOptions", "guessedtype": "function"}, "onSave": {"guessedname": "onSave", "guessedtype": "function"}, "isSaved": {"description": "Is saved ?", "guessedname": "isSaved", "guessedtype": "function"}, "markSaved": {"description": "Hide the save indicator", "guessedname": "markSaved", "guessedtype": "function"}, "renderPropertiesForm": {"description": "Render the properties form", "guessedname": "renderPropertiesForm", "guessedtype": "function"}, "renderButtons": {"description": "Toolbar", "guessedname": "renderButtons", "guessedtype": "function"}, "save": {"description": "Save method (empty)", "guessedname": "save", "guessedtype": "function"}, "markUnsaved": {"description": "Show the save indicator", "guessedname": "markUnsaved", "guessedtype": "function"}, "renderSavedStatus": {"guessedname": "renderSavedStatus", "guessedtype": "function"}}, "file": "BaseEditor.js", "guessedtype": "function", "shortname": "BaseEditor", "properties": {"helpPanel": {"type": "{YAHOO.widget.Panel}", "guessedname": "helpPanel", "guessedtype": "property"}, "el": {"description": "Container DOM element", "guessedname": "el", "guessedtype": "property"}, "layout": {"type": "{YAHOO.widget.Layout}", "guessedname": "layout", "guessedtype": "property"}, "defaultOptions": {"description": "Default options for the BaseEditor", "guessedname": "defaultOptions", "guessedtype": "property"}, "options": {"type": "{Object}", "guessedname": "options", "guessedtype": "property"}, "alertPanel": {"type": "{YAHOO.widget.Panel}", "guessedname": "alertPanel", "guessedtype": "property"}}, "description": "The BaseEditor class provides a full page interface"}, "WireIt.util.DDResize": {"name": "WireIt.util.DDResize", "constructors": [{"params": [{"type": "WireIt.Container", "name": "container", "description": " The container that is to be resizable"}, {"type": "Object", "name": "config", "description": " Configuration object"}], "description": "Make a container resizable"}], "namespace": "WireIt.util", "module": "WireIt", "events": {"eventResize": {"description": "The event fired when the container is resized", "guessedname": "eventResize", "guessedtype": "property"}}, "guessedname": "DDResize", "methods": {"onDrag": {"guessedname": "onDrag", "guessedtype": "function"}, "onMouseDown": {"guessedname": "onMouseDown", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DDResize.js", "guessedtype": "function", "shortname": "DDResize", "properties": {"myConf": {"description": "Configuration object\n<ul>\n<li>minWidth: minimum width (default 50)</li>\n<li>minHeight: minimum height (default 50)</li>\n</ul>"}}, "description": "Make a container resizable"}, "WireIt.util.ComposedContainer": {"name": "WireIt.util.ComposedContainer", "constructors": [{"description": "ComposedContainer is a class for Container representing Pipes.\nIt automatically generates the inputEx Form from the input Params."}], "namespace": "WireIt.util", "module": "composable-plugin", "guessedname": "ComposedContainer", "extends": "WireIt.FormContainer", "superclass": "WireIt.FormContainer", "file": "ComposedContainer.js", "guessedtype": "function", "shortname": "ComposedContainer", "description": "ComposedContainer is a class for Container representing Pipes.\nIt automatically generates the inputEx Form from the input Params."}, "WireIt.WiringEditor.adapters.Ajax": {"name": "WireIt.WiringEditor.adapters.Ajax", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "Ajax", "methods": {"init": {"static": "", "description": "init the adapter", "guessedname": "init", "guessedtype": "function"}, "saveWiring": {"static": "", "description": "called when saved", "guessedname": "saveWiring", "guessedtype": "function"}, "_sendRequest": {"static": "", "description": "send a request in JSON", "guessedname": "_sendRequest", "guessedtype": "function"}, "listWirings": {"static": "", "description": "called to load the wirings", "guessedname": "listWirings", "guessedtype": "function"}, "deleteWiring": {"static": "", "description": "called when deleted", "guessedname": "deleteWiring", "guessedtype": "function"}}, "static": "", "file": "ajax.js", "guessedtype": "property", "shortname": "WiringEditor.adapters.Ajax", "properties": {"config": {"description": "You can configure this adapter to different schemas.\nTIP: \"url\" can be a function !", "guessedname": "config", "guessedtype": "property"}}, "description": "Ajax Adapter. Expect JSON response for all queries."}, "WireIt.util.TerminalOutput": {"name": "WireIt.util.TerminalOutput", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Parent dom element"}, {"type": "Object", "name": "options", "description": " configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Class that extends Terminal to differenciate Input/Output terminals"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalOutput", "extends": "WireIt.Terminal", "superclass": "WireIt.Terminal", "file": "TerminalOutput.js", "guessedtype": "function", "shortname": "util.TerminalOutput", "properties": {"alwaysSrc": {"default": "true", "type": "Boolean", "description": "forces this terminal to be the src terminal in the wire config", "guessedname": "alwaysSrc", "guessedtype": "property"}, "direction": {"default": "[0,1]", "type": "Array", "description": "direction vector of the wires when connected to this terminal", "guessedname": "direction", "guessedtype": "property"}, "ddConfig": {"default": "{ type: \"output\", allowedTypes: [\"input\"] }", "type": "Object", "description": "configuration of the WireIt.TerminalProxy object", "guessedname": "ddConfig", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.TerminalOutput\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "fakeDirection": {"default": "[0,-1]", "type": "Array", "description": "direction vector of the \"editing\" wire when it started from this terminal", "guessedname": "fakeDirection", "guessedtype": "property"}}, "description": "Class that extends Terminal to differenciate Input/Output terminals"}, "WireIt.BezierWire": {"name": "WireIt.BezierWire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "The bezier wire widget"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "BezierWire", "methods": {"draw": {"description": "Redraw the Wire", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.Wire", "superclass": "WireIt.Wire", "file": "BezierWire.js", "guessedtype": "function", "shortname": "BezierWire", "properties": {"coeffMulDirection": {"default": "100", "type": "Integer", "description": "Norm of the tangent vector at the terminals", "guessedname": "coeffMulDirection", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.BezierWire\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "The bezier wire widget"}, "WireIt.GroupUtils": {"name": "WireIt.GroupUtils", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "GroupUtils", "methods": {"applyToContainers": {"params": [{"type": "WireIt.Group", "name": "group", "description": " The group object to work with"}, {"type": "boolean", "name": "deep", "description": " Whether to recurse down into sub groups applying to their containers as well"}, {"type": "Function", "name": "func", "description": " The function to apply (takes 1 arg, the container)"}, {"type": "Object", "name": "context", "description": " The context to call the function with"}], "description": "Applys the given function to all containers in the group.", "guessedname": "applyToContainers", "guessedtype": "function"}, "addAllContainers": {"params": [{"type": "WireIt.Group", "name": "The", "description": " group to get the containers from"}, {"type": "Array", "name": "The", "description": " array to add all the containers to"}], "description": "Adds all(recurses down) the containers in a group to the given array", "guessedname": "addAllContainers", "guessedtype": "function"}, "removeGroupFromLayer": {"params": [{"type": "WireIt.Group", "name": "The", "description": " group to remove"}, {"type": "WireIt.Layer", "name": "The", "description": " layer to remove them from"}], "description": "Removes the group's containers and sub groups from the layer", "guessedname": "removeGroupFromLayer", "guessedtype": "function"}, "getCollapsedConfig": {"return": {"type": "object", "description": "The collapsed config"}, "params": [{"type": "WireIt.Group", "name": "group", "description": " The group to get the config for"}, {"type": "object", "name": "map", "description": " Optional The group's map (obtained by WireIt.GroupUtils.getMap(group))"}], "description": "Get the configuration to pass to a group container", "guessedname": "getCollapsedConfig", "guessedtype": "function"}, "workOutCenter": {"return": {"type": "Array", "description": "the x, y position of the center"}, "params": [{"type": "WireIt.Group", "name": "group", "description": " The group to get the center of"}], "description": "Works out the center point of a group", "guessedname": "workOutCenter", "guessedtype": "function"}, "getOuterGroup": {"return": {"type": "WireIt.Group", "description": "The outermost group"}, "params": [{"type": "WireIt.Group", "name": "The", "description": " group to get the outer group for"}, {"type": "Function", "name": "Optional", "description": " callback function for each group found (including the given one)"}], "description": "Gets the outer most group (e.g. if this group is inside another one it gives you that one (or its parent group if it has one etc etc))", "guessedname": "getOuterGroup", "guessedtype": "function"}, "serialiseGroup": {"return": {"type": "Object", "description": "The seriliased group"}, "params": [{"type": "WiteIt.Group", "name": "group", "description": " The group to serialise"}, {"type": "Array", "name": "containers", "description": " The array of containers from the group (for generating indexes)"}], "description": "Removes direct references to group and container objects (replaces with an index), is applied recursively to sub groups", "guessedname": "serialiseGroup", "guessedtype": "function"}, "getOverridesFromUI": {"description": "Set the override options for the group (e.g. rename fields)\nCurrently sets all overrides not just the ones that are actually changed by the user", "guessedname": "getOverridesFromUI", "guessedtype": "function"}, "valueOr": {"return": {"type": "any", "description": "The argument if it is a value or the default"}, "params": [{"type": "any", "name": "The", "description": " argument to check"}, {"type": "any", "name": "The", "description": " default value"}], "description": "Gives the argument back or a default if the argument is not a value", "guessedname": "valueOr", "guessedtype": "function"}}, "file": "GroupUtils.js", "guessedtype": "property", "shortname": "GroupUtils", "description": "Contains utility functions to do with groups (also one or two more general ones)"}, "WireIt.util.InOutContainer": {"name": "WireIt.util.InOutContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container with left inputs and right outputs"}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "InOutContainer", "methods": {"render": {"guessedname": "render", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "InOutContainer.js", "guessedtype": "function", "shortname": "InOutContainer", "properties": {"className": {"default": "\"WireIt-Container WireIt-ImageContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "inputs": {"default": "[]", "type": "Array", "description": "Array of strings for which an Input terminal will be created.", "guessedname": "inputs", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.ImageContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "resizable": {"default": "false", "type": "Boolean", "description": "boolean that makes the container resizable", "guessedname": "resizable", "guessedtype": "property"}, "outputs": {"default": "[]", "type": "Array", "description": "Array of strings for which an Output terminal will be created.", "guessedname": "outputs", "guessedtype": "property"}}, "description": "Container with left inputs and right outputs"}, "WireIt.util.EllipseLabelContainer": {"name": "WireIt.util.EllipseLabelContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Draw an Ellipse and add an editable label"}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "EllipseLabelContainer", "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "EllipseLabelContainer.js", "guessedtype": "function", "shortname": "EllipseLabelContainer", "properties": {"className": {"default": "\"\"WireIt-Container WireIt-CanvasContainer WireIt-EllipseLabelContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.CanvasContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "label": {"default": "\"not set\"", "type": "String", "description": "Label String", "guessedname": "label", "guessedtype": "property"}}, "description": "Draw an Ellipse and add an editable label"}, "WireIt.Terminal": {"name": "WireIt.Terminal", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Element that will contain the terminal"}, {"type": "Object", "name": "options", "description": " Configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Terminals represent the end points of the \"wires\""}], "namespace": "WireIt", "module": "WireIt", "events": {"eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myTerminal.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myTerminal.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}}, "guessedname": "Terminal", "methods": {"getXY": {"description": "This function is a temporary test. I added the border width while traversing the DOM and\nI calculated the offset to center the wire in the terminal just after its creation", "guessedname": "getXY", "guessedtype": "function"}, "setDropInvitation": {"params": [{"type": "Boolean", "name": "display", "description": " Show the invitation if true, hide it otherwise"}], "description": "Show or hide the drop invitation. (by adding/removing this.options.dropinviteClassName CSS class)", "guessedname": "setDropInvitation", "guessedtype": "function"}, "render": {"description": "Render the DOM of the terminal", "guessedname": "render", "guessedtype": "function"}, "getConnectedTerminals": {"return": {"type": "Array", "description": "List of all connected terminals"}, "description": "Returns a list of all the terminals connecter to this terminal through its wires.", "guessedname": "getConnectedTerminals", "guessedtype": "function"}, "remove": {"description": "Remove the terminal from the DOM", "guessedname": "remove", "guessedtype": "function"}, "setOptions": {"description": "Set the options by putting them in this (so it overrides the prototype default)", "guessedname": "setOptions", "guessedtype": "function"}, "redrawAllWires": {"description": "Redraw all the wires connected to this terminal", "guessedname": "redrawAllWires", "guessedtype": "function"}, "removeAllWires": {"description": "Remove all wires", "guessedname": "removeAllWires", "guessedtype": "function"}, "addWire": {"params": [{"type": "WireIt.Wire", "name": "wire", "description": " Wire instance to add"}], "description": "Add a wire to this terminal.", "guessedname": "addWire", "guessedtype": "function"}, "setPosition": {"description": "TODO", "guessedname": "setPosition", "guessedtype": "function"}, "removeWire": {"params": [{"type": "WireIt.Wire", "name": "wire", "description": " Wire instance to remove"}], "description": "Remove a wire", "guessedname": "removeWire", "guessedtype": "function"}}, "file": "Terminal.js", "guessedtype": "function", "shortname": "Terminal", "properties": {"el": {"type": "{HTMLElement}", "description": "DIV dom element that will display the Terminal", "guessedname": "el", "guessedtype": "property"}, "direction": {"default": "[0,1]", "type": "Array", "description": "direction vector of the wires when connected to this terminal", "guessedname": "direction", "guessedtype": "property"}, "wires": {"type": "Array", "description": "List of the associated wires", "guessedname": "wires", "guessedtype": "property"}, "container": {"type": "WireIt.Container", "description": "Container (optional). Parent container of this terminal", "guessedname": "container", "guessedtype": "property"}, "name": {"default": "null", "type": "String", "description": "Name of the terminal", "guessedname": "name", "guessedtype": "property"}, "editingWireConfig": {"default": "{}", "type": "Object", "description": "Options for the wires connected to this terminal", "guessedname": "editingWireConfig", "guessedtype": "property"}, "wireConfig": {"default": "{}", "type": "Object", "description": "Options for the wires connected to this terminal", "guessedname": "wireConfig", "guessedtype": "property"}, "parentEl": {"type": "DOMElement", "description": "DOM parent element", "guessedname": "parentEl", "guessedtype": "property"}, "editable": {"default": "true", "type": "Boolean", "description": "boolean that makes the terminal editable", "guessedname": "editable", "guessedtype": "property"}, "dropinviteClassName": {"default": "\"WireIt-dropinvite\"", "type": "String", "description": "CSS class added for drop invitation", "guessedname": "dropinviteClassName", "guessedtype": "property"}, "className": {"default": "\"WireIt-Terminal\"", "type": "String", "description": "CSS class name for the terminal element", "guessedname": "className", "guessedtype": "property"}, "alwaysSrc": {"default": "false", "type": "Boolean", "description": "forces this terminal to be the src terminal in the wire config", "guessedname": "alwaysSrc", "guessedtype": "property"}, "connectedClassName": {"default": "\"WireIt-connected\"", "type": "String", "description": "CSS class added to the terminal when it is connected", "guessedname": "connectedClassName", "guessedtype": "property"}, "fakeDirection": {"default": "[0,-1]", "type": "Array", "description": "direction vector of the \"editing\" wire when it started from this terminal", "guessedname": "fakeDirection", "guessedtype": "property"}, "ddConfig": {"default": "{}", "type": "Object", "description": "configuration of the WireIt.TerminalProxy object", "guessedname": "ddConfig", "guessedtype": "property"}, "nMaxWires": {"default": "Infinity", "type": "Integer", "description": "maximum number of wires for this terminal", "guessedname": "nMaxWires", "guessedtype": "property"}, "offsetPosition": {"default": "null", "type": "Array", "description": "offset position from the parentEl position. Can be an array [top,left] or an object {left: 100, bottom: 20} or {right: 10, top: 5} etc...", "guessedname": "offsetPosition", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.Terminal\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "Terminals represent the end points of the \"wires\""}, "WireIt.util.ImageContainer": {"name": "WireIt.util.ImageContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container represented by an image"}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "ImageContainer", "methods": {"render": {"description": "Add the image property as a background image for the container", "guessedname": "render", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "ImageContainer.js", "guessedtype": "function", "shortname": "ImageContainer", "properties": {"className": {"default": "\"\"WireIt-Container WireIt-ImageContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "ddHandle": {"default": "false", "type": "Boolean", "description": "(only if draggable) boolean indicating we use a handle for drag'n drop", "guessedname": "ddHandle", "guessedtype": "property"}, "image": {"default": "null", "type": "String", "description": "image url", "guessedname": "image", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.ImageContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "resizable": {"default": "false", "type": "Boolean", "description": "boolean that makes the container resizable", "guessedname": "resizable", "guessedtype": "property"}}, "description": "Container represented by an image"}, "WireIt.WiringEditor.adapters.Gears": {"name": "WireIt.WiringEditor.adapters.Gears", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "Gears", "static": "", "file": "gears.js", "guessedtype": "property", "shortname": "WiringEditor.adapters.Gears", "description": "Gears Adapter (using http://gears.google.com)"}, "WireIt.util.ComposableWiringEditor": {"name": "WireIt.util.ComposableWiringEditor", "constructors": [{"description": "The ComposableWiringEditor"}], "namespace": "WireIt.util", "module": "composable-plugin", "guessedname": "ComposableWiringEditor", "methods": {"onLoadSuccess": {"description": "Customize the load success handler for the composed module list", "guessedname": "onLoadSuccess", "guessedtype": "function"}, "updateComposedModuleList": {"description": "All the saved wirings are reusable modules :", "guessedname": "updateComposedModuleList", "guessedtype": "function"}}, "extends": "WireIt.ComposableWiringEditor", "superclass": "WireIt.ComposableWiringEditor", "file": "ComposableWiringEditor.js", "guessedtype": "function", "shortname": "ComposableWiringEditor", "properties": {"composedCategory": {"guessedname": "composedCategory", "guessedtype": "property"}, "modules": {"static": "", "description": "Default \"input\" and \"output\" modules", "guessedname": "modules", "guessedtype": "property"}}, "description": "The ComposableWiringEditor"}, "inputEx.Field": {"name": "inputEx.Field", "namespace": "inputEx", "module": "inputex-plugin", "guessedname": "Field", "methods": {"setContainer": {"description": "Set the container for this field", "guessedname": "setContainer", "guessedtype": "function"}, "render": {"description": "Adds a terminal to each field", "guessedname": "render", "guessedtype": "function"}, "onRemoveWire": {"description": "Remove the input wired state on the", "guessedname": "onRemoveWire", "guessedtype": "function"}, "setOptions": {"description": "Adds a wirable option to every field", "guessedname": "setOptions", "guessedtype": "function"}, "setFieldName": {"description": "also change the terminal name when changing the field name", "guessedname": "setFieldName", "guessedtype": "function"}, "renderTerminal": {"description": "Render the associated input terminal", "guessedname": "renderTerminal", "guessedtype": "function"}, "onAddWire": {"description": "Remove the input wired state on the", "guessedname": "onAddWire", "guessedtype": "function"}}, "extends": "inputEx.BaseField", "superclass": "inputEx.BaseField", "file": "WirableField.js", "guessedtype": "function", "shortname": "Field", "properties": {"_addElement": {"description": "setContainer must be called on each new element", "guessedname": "_addElement", "guessedtype": "property"}}, "description": "Class to make inputEx Fields \"wirable\".Re-create inputEx.Field adding the wirable properties"}, "WireIt.FormContainer": {"name": "WireIt.FormContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Configuration object (see properties)"}, {"type": "WireIt.Layer", "name": "layer", "description": " The WireIt.Layer (or subclass) instance that contains this container"}], "description": "Class used to build a container with inputEx forms"}], "namespace": "WireIt", "module": "inputex-plugin", "guessedname": "GroupFormContainer", "methods": {"setOptions": {"guessedname": "setOptions", "guessedtype": "function"}, "renderForm": {"description": "Render the form", "guessedname": "renderForm", "guessedtype": "function"}, "setValue": {"guessedname": "setValue", "guessedtype": "function"}, "render": {"description": "The render method is overrided to call renderForm", "guessedname": "render", "guessedtype": "function"}, "getValue": {"guessedname": "getValue", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "FormContainer.js", "guessedtype": "function", "shortname": "FormContainer", "properties": {"fields": {"default": "[]", "type": "Array", "description": "List of inputEx field definitions", "guessedname": "fields", "guessedtype": "property"}, "collapsible": {"default": "false", "type": "Boolean", "description": "Collapsible", "guessedname": "collapsible", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.FormContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "legend": {"default": "null", "type": "String", "description": "Legend", "guessedname": "legend", "guessedtype": "property"}}, "description": "Class used to build a container with inputEx forms"}, "WireIt.StepWire": {"name": "WireIt.StepWire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "The step wire widget"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "StepWire", "methods": {"draw": {"description": "Drawing methods for arrows", "guessedname": "draw", "guessedtype": "function"}}, "extends": "WireIt.Wire", "superclass": "WireIt.Wire", "file": "StepWire.js", "guessedtype": "function", "shortname": "StepWire", "properties": {"xtype": {"default": "\"WireIt.StepWire\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}}, "description": "The step wire widget"}, "WireIt.WireIt": {"name": "WireIt.WireIt", "namespace": "WireIt", "module": "WireIt", "guessedname": "WireIt", "static": "", "file": "WireIt.js", "guessedtype": "property", "shortname": "WireIt", "properties": {"defaultWireClass": {"description": "TODO", "guessedname": "defaultWireClass", "guessedtype": "property"}, "util": {"description": "WireIt.util contains utility classes", "guessedname": "util", "guessedtype": "property"}}, "methods": {"compact": {"return": {"type": "Array", "description": "compacted array"}, "description": "compact replace Array.compact for cases where it isn't available", "static": "", "guessedname": "compact", "guessedtype": "property", "params": [{"type": "Array", "name": "arr", "description": " Array to compact"}]}, "cn": {"return": {"type": "HTMLElement", "description": "The created node"}, "description": "Helper function to create a DOM node. (wrapps the document.createElement tag and the inputEx.sn functions)", "static": "", "guessedname": "cn", "guessedtype": "function", "params": [{"type": "String", "name": "tag", "description": " The tagName to create (ex: 'div', 'a', ...)"}, {"type": "Object", "name": "[domAttributes]", "description": " see inputEx.sn"}, {"type": "Object", "name": "[styleAttributes]", "description": " see inputEx.sn"}, {"type": "String", "name": "[innerHTML]", "description": " The html string to append into the created element"}]}, "classFromXtype": {"description": "default", "guessedname": "classFromXtype", "guessedtype": "function"}, "indexOf": {"return": {"type": "Integer", "description": "element index or -1 if not found"}, "description": "indexOf replace Array.indexOf for cases where it isn't available (IE6 only ?)", "static": "", "guessedname": "indexOf", "guessedtype": "property", "params": [{"type": "Any", "name": "el", "description": " element to search for"}, {"type": "Array", "name": "arr", "description": " Array to search into"}]}, "sn": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to set attributes to"}, {"type": "Object} domAttributes An object containing key/value pairs to set as node attributes (ex: {id: 'myElement', className: 'myCssClass', ...", "name": ")", "description": ""}, {"type": "Object", "name": "styleAttributes", "description": " Same thing for style attributes. Please use camelCase for style attributes (ex: backgroundColor for 'background-color')"}], "description": "Helper function to set DOM node attributes and style attributes.", "guessedname": "sn", "guessedtype": "function"}, "getIntStyle": {"return": {"type": "Integer", "description": "integer size"}, "description": "Get a css property in pixels and convert it to an integer", "static": "", "guessedname": "getIntStyle", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}, {"type": "String", "name": "style", "description": " css-property to get"}]}}}, "WireIt.ModuleProxy": {"name": "WireIt.ModuleProxy", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": ""}, {"type": "WireIt.WiringEditor", "name": "WiringEditor", "description": ""}], "description": "Module Proxy handle the drag/dropping from the module list to the layer (in the WiringEditor)"}], "namespace": "WireIt", "module": "editor-plugin", "guessedname": "ModuleProxy", "methods": {"onDragDrop": {"description": "Add the module to the WiringEditor on drop on layer", "guessedname": "onDragDrop", "guessedtype": "function"}, "startDrag": {"description": "copy the html and apply selected classes", "guessedname": "startDrag", "guessedtype": "function"}, "endDrag": {"description": "Override default behavior of DDProxy", "guessedname": "endDrag", "guessedtype": "function"}}, "file": "ModuleProxy.js", "guessedtype": "function", "shortname": "ModuleProxy", "description": "Module Proxy handle the drag/dropping from the module list to the layer (in the WiringEditor)"}, "WireIt.CanvasElement": {"name": "WireIt.CanvasElement", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentNode", "description": " The canvas tag will be append to this parent DOM node."}], "description": "Create a canvas element and wrap cross-browser hacks to resize it"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "CanvasElement", "methods": {"destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "SetCanvasRegion": {"params": [{"type": "Number", "name": "left", "description": " Left position"}, {"type": "Number", "name": "top", "description": " Top position"}, {"type": "Number", "name": "width", "description": " New width"}, {"type": "Number", "name": "height", "description": " New height"}], "description": "Set the canvas position and size.\n<b>Warning:</b> This method changes the <i>element</i> property under some brother. Don't copy references !", "guessedname": "SetCanvasRegion", "guessedtype": "property"}, "getContext": {"return": {"type": "CanvasContext", "description": "the context"}, "params": [{"type": "String", "name": "[mode]", "description": " Context mode (default \"2d\")"}], "description": "Get a drawing context", "guessedname": "getContext", "guessedtype": "function"}}, "file": "CanvasElement.js", "guessedtype": "function", "shortname": "CanvasElement", "properties": {"element": {"type": "HTMLElement", "description": "The canvas element", "guessedname": "element", "guessedtype": "property"}}, "description": "Create a canvas element and wrap cross-browser hacks to resize it"}, "WireIt.CanvasContainer": {"name": "WireIt.CanvasContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container that draw into a canvas. (Draw an Ellipse by default, override the drawCanvas method to customize)"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "CanvasContainer", "methods": {"drawCanvas": {"description": "Draw the canvas", "guessedname": "drawCanvas", "guessedtype": "function"}, "render": {"description": "Add the image property as a background image for the container", "guessedname": "render", "guessedtype": "function"}, "onResize": {"description": "On resize, resize the canvas element and redraw it", "guessedname": "onResize", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "CanvasContainer.js", "guessedtype": "function", "shortname": "CanvasContainer", "properties": {"className": {"default": "\"\"WireIt-Container WireIt-CanvasContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "width": {"default": "200", "type": "Integer", "description": "initial width of the container", "guessedname": "width", "guessedtype": "property"}, "ddHandle": {"default": "false", "type": "Boolean", "description": "(only if draggable) boolean indicating we use a handle for drag'n drop", "guessedname": "ddHandle", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.CanvasContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "height": {"default": "100", "type": "Integer", "description": "initial height of the container", "guessedname": "height", "guessedtype": "property"}}, "description": "Container that draw into a canvas. (Draw an Ellipse by default, override the drawCanvas method to customize)"}, "WireIt.RubberBand": {"name": "WireIt.RubberBand", "namespace": "WireIt", "module": "editor-plugin", "guessedname": "RubberBand", "methods": {"finish": {"description": "End the drawing mode", "guessedname": "finish", "guessedtype": "function"}, "hide": {"description": "Hide the RubberBand", "guessedname": "hide", "guessedtype": "function"}, "show": {"description": "Show the RubberBand", "guessedname": "show", "guessedtype": "function"}, "pointIsInside": {"description": "Check if the given (x,y) is within the RubberBand path", "guessedname": "pointIsInside", "guessedtype": "function"}, "start": {"description": "Start the drawing mode", "guessedname": "start", "guessedtype": "function"}, "nextPoint": {"description": "Add a point to the RubberBand", "guessedname": "nextPoint", "guessedtype": "function"}, "scroll": {"description": "Scroll the associated WireIt.Layer", "guessedname": "scroll", "guessedtype": "function"}, "layerMouseDown": {"description": "Check if clicked in the layer and start the drawing mode", "guessedname": "layerMouseDown", "guessedtype": "function"}}, "extends": "WireIt.CanvasElement", "superclass": "WireIt.CanvasElement", "file": "RubberBand.js", "guessedtype": "function", "shortname": "RubberBand", "properties": {"defaultDelay": {"static": "", "description": "Delay in ms between two points of the RubberBand when drawing", "guessedname": "defaultDelay", "guessedtype": "property"}}, "description": "A CanvasElement widget to hand-draw a selection"}, "WireIt.LayerMap": {"name": "WireIt.LayerMap", "constructors": [{"params": [{"type": "WireIt.Layer", "name": "layer", "description": " the layer object it is attached to"}, {"type": "Obj", "name": "options", "description": " configuration object"}], "description": "Widget to display a minimap on a layer"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "LayerMap", "methods": {"draw": {"description": "Redraw the layer map", "guessedname": "draw", "guessedtype": "function"}, "scrollLayer": {"params": [{"type": "Integer", "name": "clientX", "description": " mouse event x coordinate"}, {"type": "Integer", "name": "clientY", "description": " mouse event y coordinate"}], "description": "Scroll the layer from mousedown/mousemove", "guessedname": "scrollLayer", "guessedtype": "function"}, "initEvents": {"description": "Listen for various events that should redraw the layer map", "guessedname": "initEvents", "guessedtype": "function"}, "drawContainers": {"description": "Subroutine to draw the containers", "guessedname": "drawContainers", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouse down is received", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOptions": {"description": "Set the options by putting them in this (so it overrides the prototype default)", "guessedname": "setOptions", "guessedtype": "function"}, "onMouseMove": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouse move is received", "guessedname": "onMouseMove", "guessedtype": "function"}, "drawWires": {"description": "Subroutine to draw the wires", "guessedname": "drawWires", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouseup or mouseout is received", "guessedname": "onMouseUp", "guessedtype": "function"}, "onLayerScroll": {"description": "Redraw after a timeout", "guessedname": "onLayerScroll", "guessedtype": "function"}}, "extends": "WireIt.CanvasElement", "superclass": "WireIt.CanvasElement", "file": "LayerMap.js", "guessedtype": "function", "shortname": "LayerMap", "properties": {"className": {"default": "\"WireIt-LayerMap\"", "type": "String", "description": "CSS class name for the layer map element", "guessedname": "className", "guessedtype": "property"}, "layer": {"guessedname": "layer", "guessedtype": "property"}, "parentEl": {"default": "null", "type": "DOMElement", "description": "DOM element that schould contain the layer", "guessedname": "parentEl", "guessedtype": "property"}, "style": {"default": "\"WireIt-LayerMap\"", "type": "String", "description": "display style", "guessedname": "style", "guessedtype": "property"}, "lineWidth": {"default": "2", "type": "Integer", "description": "Line width", "guessedname": "lineWidth", "guessedtype": "property"}}, "description": "Widget to display a minimap on a layer"}, "inputEx.LayerContainer": {"name": "inputEx.LayerContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container that has a Layer"}], "namespace": "inputEx", "module": "inputex-plugin", "guessedname": "LayerContainer", "methods": {"stopDynamicLayout": {"description": "Stop the dynamic layout", "guessedname": "stopDynamicLayout", "guessedtype": "function"}, "render": {"description": "Render a WireIt.Layer inside !", "guessedname": "render", "guessedtype": "function"}, "startDynamicLayout": {"description": "Start a dynamic layout", "guessedname": "startDynamicLayout", "guessedtype": "function"}, "layoutAnim": {"description": "Calculate the new position for the given layout and animate the layer to this position", "guessedname": "layoutAnim", "guessedtype": "function"}, "setTerminals": {"description": "In case you change the terminals since you created the WireIt.LayerContainer.DD:", "guessedname": "setTerminals", "guessedtype": "function"}, "onDrag": {"description": "Override YAHOO.util.DD.prototype.onDrag to redraw the wires", "guessedname": "onDrag", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "LayerContainer.js", "guessedtype": "function", "shortname": "LayerContainer", "properties": {"Layout": {"static": "", "guessedname": "Layout", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.LayerContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "height": {"default": "100", "type": "Integer", "description": "initial height of the container", "guessedname": "height", "guessedtype": "property"}, "className": {"default": "\"\"WireIt-Container WireIt-LayerContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "width": {"default": "200", "type": "Integer", "description": "initial width of the container", "guessedname": "width", "guessedtype": "property"}, "ddHandle": {"default": "false", "type": "Boolean", "description": "(only if draggable) boolean indicating we use a handle for drag'n drop", "guessedname": "ddHandle", "guessedtype": "property"}, "_WireItTerminals": {"type": "{Array}", "description": "List of the contained terminals", "guessedname": "_WireItTerminals", "guessedtype": "property"}}, "description": "Container that has a Layer"}, "WireIt.util.TerminalInput": {"name": "WireIt.util.TerminalInput", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Parent dom element"}, {"type": "Object", "name": "options", "description": " configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Class that extends Terminal to differenciate Input/Output terminals"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalInput", "extends": "WireIt.Terminal", "superclass": "WireIt.Terminal", "file": "TerminalInput.js", "guessedtype": "function", "shortname": "util.TerminalInput", "properties": {"direction": {"default": "[0,-1]", "type": "Array", "description": "direction vector of the wires when connected to this terminal", "guessedname": "direction", "guessedtype": "property"}, "nMaxWires": {"default": "1", "type": "Integer", "description": "maximum number of wires for this terminal", "guessedname": "nMaxWires", "guessedtype": "property"}, "ddConfig": {"default": "{ type: \"input\", allowedTypes: [\"output\"] }", "type": "Object", "description": "configuration of the WireIt.TerminalProxy object", "guessedname": "ddConfig", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.TerminalInput\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "fakeDirection": {"default": "[0,1]", "type": "Array", "description": "direction vector of the \"editing\" wire when it started from this terminal", "guessedname": "fakeDirection", "guessedtype": "property"}}, "description": "Class that extends Terminal to differenciate Input/Output terminals"}, "WireIt.RectLabelContainer": {"name": "WireIt.RectLabelContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Draw an Ellipse and add an editable label"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "RectLabelContainer", "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "RectLabelContainer.js", "guessedtype": "function", "shortname": "RectLabelContainer", "properties": {"className": {"default": "\"\"WireIt-Container WireIt-CanvasContainer WireIt-RectLabelContainer\"", "type": "String", "description": "CSS class name for the container element", "guessedname": "className", "guessedtype": "property"}, "width": {"default": "200", "type": "Integer", "description": "initial width of the container", "guessedname": "width", "guessedtype": "property"}, "ddHandle": {"default": "false", "type": "Boolean", "description": "(only if draggable) boolean indicating we use a handle for drag'n drop", "guessedname": "ddHandle", "guessedtype": "property"}, "xtype": {"default": "\"WireIt.CanvasContainer\"", "type": "String", "description": "String representing this class for exporting as JSON", "guessedname": "xtype", "guessedtype": "property"}, "label": {"default": "\"not set\"", "type": "String", "description": "Label String", "guessedname": "label", "guessedtype": "property"}}, "description": "Draw an Ellipse and add an editable label"}}, "version": "0.6.0", "namespaces": ["WireIt", "WireIt.util", "inputEx"]}